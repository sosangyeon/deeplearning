Abstract
객체 감지를 공간적으로 분리된 bounding boxes 및 관련 클래스 확률에 대한 회귀 문제로 구성한다. 
단일 신경망은 한 번의 평가로 전체 이미지에서 직접 bounding box와 class 확률을 예측한다. 
전체 탐지 파이프라인이 단일 네트워크이기 때문에 탐지 성능에 대해 직접 엔드 투 엔드로 최적화할 수 있다.
기본 yolo모델은 초당 45프레임의 속도로 실시간으로 이미지를 처러한다. 
더 작은 버전의 네트워크인 fast yolo는 초당 155프레임이라는 놀라운 속도를 처리하면서도 다른 실시간 
감지기보다 두 배의 mAP를 달성한다. 

1. Introduction
인간은 이미지를 한 눈에 보고 이미지에 어떤 물체가 있는지, 어디에 있는지, 어떻게 상호 작용하는지 즉시 알 수 있다.
인간의 시각 시스템은 빠르고 정확하여 의식적인 생각 없이 운전과 같은 복잡한 작업을 수행할 수 있다. 
Deformable Parts Model은 전체 이미지에 걸쳐 균일한 간격의 위치에서 실행되는 슬라이딩 윈도우 접근 방식을 사용한다.
먼저 이미지에서 잠재적인 경계 상자를 생성한 다음 이러한 제안된 상자에 대해 classifier를 실행하는 방법을 사용한다.
분류 후 후처리를 사용하여 바운딩 박스를 구체화하고, 중복 감지를 제거하고, 장면의 다른 오브젝트를 기반으로 
박스의 점수를 다시 매긴다. 
-> 복잡한 파이프라인, 속도가 느리고 최적화하기 어려우며, 각 개별 구성 요소를 개별적으로 학습시켜야 한다.
yolo의 이점
1. 빠르다. 탐지를 회귀 문제로 구성하기 때문에 복잡한 파이프라인이 필요하지 않다. 
2. 전체 이미지를 보기 때문에 클래스에 대한 컨텍스트 정보와 클래스의 모양을 암시적으로 인코딩한다.
fast r-cnn은 더 큰 컨텍스트를 볼 수 없기 때문에 이미지의 배겨 패치를 객체로 오인한다.
3. yolo는 일반화 가능한 객체 표현을 학습한다. 높은 일반화 성능으로 새로운 도메인이나 예기치 않은 입력에 적용했을 때
성능이 떨어질 일이 적다.
정확성과 빠른 속도의 트레이드오프 관계로 작은 물체를 정확하게 위치화하는데 어려움이 있다.

2. Unified Detection
물체 감지의 개별 구성 요소를 단일 신경망으로 통합한다.
이미지에 대한 모든 클래스의 경계 상자를 동시에 예측하고 모든 개체에 대해 추론한다.
높은 정밀도를 유지하면서 엔드 투 엔드 훈련 및 실시간 속도를 가능하게 한다. 
입력 이미지를 SxS 그리드로 나눈다. 개체의 중심이 그리드 셀에 속하는 경우 해당 그리드 셀은 해당 개체를 감지하는 역할을 한다.
각 그리드 셀은 B 경계 상자와 해당 상자에 대한 신뢰도 점수를 예측한다.
이러한 신뢰도 점수는 상자에 개체가 포함되어 있다는 모델의 신뢰도와 상자가 예측하는 것이 얼마나 정확하다고 생각하는지를 반영한다. 
(공식 : Pr(Object) ∗ IOUtruth pred)
신뢰도 점수가 예측된 상자와 실측 자료 사이의 IOU와 같기를 원한다. 
각 경계 상자는 x,y,w,h 및 신뢰도의 5가지 예측으로 구성된다. 
(x,y)좌표는 그리드 셀의 경계를 기준으로 상자의 중심을 나타낸다. 
너비와 높이는 전체 이미지를 기준으로 예측된다. 
신뢰도 예측은 예측된 상자와 실측 상자 사이의 IOU를 나타낸다. 

2.1 Network Design
신경망의 초기 컨볼루션 계층은 영상에서 특징을 추출하고, 완전 연결 계층은 출력 확률과 좌표를 예측한다.
24개의 컨볼루션 계층과 2개의 fclayer가 있다. 
1x1 축소 레이어와 3x3 컨볼루셔널 레이어를 사용한다. -> 1x1 축소 레이어가 채널 수를 줄인 후, 3x3 컨볼루션을 적용하면 더 적은 계산 비용으로 중요한 특징을 학습할 수 있다.

2.2 Training
탐지에는 세분화된 시각 정보가 필요한 경우가 많으므로 네트워크의 입력 해상도를 224x224에서 448x448로 높인다.
마지막 계층은 클래스 확률과 경계 상자 좌표를 모두 예측한다.
bounding box 너비와 높이는 정규화하여 0~1 사이에 오도록 한다. 
bounding box x 및 y 좌표를 특정 그리드 셀 위치의 오프셋으로 매개 변수화하여 0~1 사이의 경계가 되도록 한다. 
마지막 레이어에 linear activation을 사용하고 다른 모든 레이어는 leaky ReLU을 사용한다.
모든 출력에서 합 제곱 오차에 대해 최적화한다. 

학습 과정에서 생길 수 있는 문제
1. 합계 제곱 오차(Mean Squared Error, MSE)와 평균 정밀도(Average Precision, AP) 간의 불일치
객체 탐지 문제에서는 MSE가 평균 정밀도(AP)와 직접적으로 일치하지 않는다. 
객체 탐지에서는 위치 정보(바운딩 박스의 좌표)와 분류 정보(객체의 클래스)가 모두 중요하다. 
그러나 MSE는 위치 오류와 분류 오류를 같은 방식으로 처리하므로, 위치 예측에서 발생하는 작은 오류도 전체 손실에 크게 영향을 줄 수 있다. 
이는 실제로 모델이 관심을 가져야 하는 중요한 오류(분류 오류)보다 덜 중요한 오류에 더 큰 가중치를 부여할 수 있다.

2. 그리드 셀의 불균형
대부분의 그리드 셀은 객체를 포함하지 않으며, 이러한 셀의 예측 신뢰도는 0으로 설정된다.
신뢰도 점수가 0으로 설정된 그리드 셀들이 너무 많아지면, 실제로 객체가 있는 셀의 그래디언트가 압도당할 수 있다. 
즉, 신뢰도가 낮아야 하는데 낮다고 예측하는 것이 너무 많아지면, 모델이 객체가 있는 셀에서 잘못된 예측을 수정하기 위한 학습을 제대로 하지 못할 수 있다. 
이는 모델이 학습 초기 단계에서 올바른 방향으로 학습하지 못하게 할 수 있으며, 모델의 불안정성을 초래할 수 있다.

이 문제를 해결하기 위해 bounding box 좌표 예측으로 인한 손실을 늘리고 개체가 포함되지 않은 상자에 대한 신뢰도 예측으로 인한 손실을 줄인다.
이를 위해 λcoord와 λnoobj라는 두 개의 매개변수를 사용한다.
큰 상자의 작은 편차가 작은 상자보다 덜 중요하다는 것을 반영하기 위해 너비와 높의 제곱근을 예측한다.

(IOU는 예측된 바운딩 박스와 실제 객체의 바운딩 박스(ground truth) 간의 겹치는 정도를 측정하는 지표)
YOLO모델에서 각 그리드 셀은 여러 개의 바운딩 박스를 예측하지만, 학습 과정에서 특정 객체에 대해 여러 바운딩 박스가 예측되면 그 중 하나의 바운딩 박스 예측기만이 그 객체를 "책임지게" 된다.
각 바운딩 박스 예측기는 특정 크기나 비율, 또는 특정 클래스의 객체를 예측하는 데 점점 더 능숙해진다.
이는 학습 과정에서 예측기가 반복적으로 특정 유형의 객체에 대한 예측을 책임지게 되면서 이루어진다.

1ᵒᵇʲᵢ: 이 표현은 그리드 셀 i에 객체가 존재하는지를 나타낸다. 객체가 존재하면 이 값은 1이 되고, 그렇지 않으면 0이 된다.
1ᵒᵇʲᵢⱼ: 이 표현은 그리드 셀 i의 j번째 바운딩 박스 예측기가 해당 객체를 예측하는 데 책임이 있는지를 나타낸다. 즉, 이 값은 j번째 바운딩 박스 예측기가 그 객체를 예측하는 데 있어서 가장 높은 IOU 값을 가지면 1로 설정된다.
바운딩 박스의 좌표 오류는 가장 높은 IOU를 가진 바운딩 박스 예측기에 대해서만 페널티가 부과된다. 이는 그 예측기가 해당 객체의 좌표를 책임지기 때문이다.


